#include "game.h"

Game::Game ()
{
  int screenW, screenH;
  screenW = 640;
  screenH = 480;
  if (SDL_Init (SDL_INIT_EVERYTHING) == 0)
    {
      running = true;
    }
  else
    {
      running = false;
      std::
	cout << "ERROR: Unable to intialize SDL. SDL_GetError() returns " <<
	SDL_GetError () << std::endl;
    }
  if (running)
    {
      window =
	SDL_CreateWindow ("mPong", SDL_WINDOWPOS_UNDEFINED,
			  SDL_WINDOWPOS_UNDEFINED, screenW, screenH,
			  SDL_WINDOW_SHOWN);
      if (!window)
	{
	  running = false;
	  std::
	    cout <<
	    "ERROR: Unable to intialize the main window. SDL_GetError() returns "
	    << SDL_GetError () << std::endl;
	}
      renderer = SDL_CreateRenderer (window, -1, SDL_RENDERER_ACCELERATED);
      if (!renderer)
	{
	  running = false;
	  std::
	    cout <<
	    "ERROR: Unable to intialize the main renderer. SDL_GetError() returns "
	    << SDL_GetError () << std::endl;
	}
    }
  p1x = 0;
  p2x = 0;
  p1.w = screenW / 8;
  p1.h = screenH / 20;
  p1.x = screenW / 2 - (p1.w / 2);
  p1.y = 0;
  while (running)
    {
      render ();
    }
}

void
Game::input (SDL_Event event)
{
  while (SDL_PollEvent (&event))
    {
      if (event.type == SDL_QUIT)
	{
	  running = false;
	}
      else if (event.type == SDL_KEYDOWN)
	{
	  if (event.key.keysym.sym == SDLK_ESCAPE)
	    {
	      running = false;
	    }
	  if (event.key.keysym.sym == SDLK_LEFT)
	    {
	      p1.x = p1.x + 1;
	      std::cout << p1.x << std::endl;
	    }
	}
      else if (event.type == SDL_MOUSEMOTION)
	{
	  std::cout << event.motion.x << std::endl;
	  while (event.motion.x - p1.x > 0)
	    {
	      std::cout << event.motion.x - p1.x << std::endl;
	      p1.x = p1.x + 0.0000002;
	    }
	  while (event.motion.x - p1.x < 0)
	    {
	      std::cout << event.motion.x - p1.x << std::endl;
	      p1.x = p1.x - 0.0000002;
	    }

	}
    }
}

void
Game::render ()
{
  p1.x = p1x;
  p2.x = p2x;
  SDL_SetRenderDrawColor (renderer, 0, 0, 0, 255);
  SDL_RenderClear (renderer);
  SDL_SetRenderDrawColor (renderer, 255, 255, 255, 255);
  SDL_RenderFillRect (renderer, &p1);
  SDL_Event event;
  input (event);
  SDL_RenderPresent (renderer);
}
